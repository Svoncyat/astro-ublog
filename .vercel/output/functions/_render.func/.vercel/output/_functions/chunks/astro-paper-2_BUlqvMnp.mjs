const id = "astro-paper-2.md";
						const collection = "blog";
						const slug = "astro-paper-2";
						const body = "\nAstro 2.0 has been released with some cool features, breaking changes, DX improvements, better error overlay and so on. AstroPaper takes advantage of those cool features, especially Content Collections API.\n\n<!-- ![Introducing AstroPaper 2.0](https://user-images.githubusercontent.com/53733092/215683840-dc2502f5-8c5a-44f0-a26c-4e7180455056.png) -->\n\n![Introducing AstroPaper 2.0](https://user-images.githubusercontent.com/53733092/215771435-25408246-2309-4f8b-a781-1f3d93bdf0ec.png)\n\n## Table of contents\n\n## Features & Changes\n\n### Type-safe Frontmatters and Redefined Blog Schema\n\nFrontmatter of AstroPaper 2.0 markdown contents are now type-safe thanks to Astroâ€™s Content Collections. Blog schema is defined inside the `src/content/_schemas.ts` file.\n\n### New Home for Blog contents\n\nAll the blog posts were moved from `src/contents` to `src/content/blog` directory.\n\n### New Fetch API\n\nContents are now fetched with `getCollection` function. No relative path to the content needs to be specified anymore.\n\n```ts\n// old content fetching method\n- const postImportResult = import.meta.glob<MarkdownInstance<Frontmatter>>(\n  \"../contents/**/**/*.md\",);\n\n// new content fetching method\n+ const postImportResult = await getCollection(\"blog\");\n```\n\n### Modified Search Logic for better Search Result\n\nIn the older version of AstroPaper, when someone search some article, the search criteria keys that will be searched are `title`, `description` and `headings` (heading means all the headings h1 ~ h6 of the blog post). In AstroPaper v2, only `title` and `description` will be searched as the user types.\n\n### Renamed Frontmatter Properties\n\nThe following frontmatter properties are renamed.\n\n| Old Names | New Names   |\n| --------- | ----------- |\n| datetime  | pubDatetime |\n| slug      | postSlug    |\n\n### Default Tag for blog post\n\nIf a blog post doesn't have any tag (in other words, frontmatter property `tags` is not specified), the default tag `others` will be used for that blog post. But you can set the default tag in the `/src/content/_schemas.ts` file.\n\n```ts\n// src/contents/_schemas.ts\nexport const blogSchema = z.object({\n  // ---\n  // replace \"others\" with whatever you want\n  tags: z.array(z.string()).default([\"others\"]),\n  ogImage: z.string().optional(),\n  description: z.string(),\n});\n```\n\n### New Predefined Dark Color Scheme\n\nAstroPaper v2 has a new dark color scheme (high contrast & low contrast) which is based on Astro's dark logo. Check out [this link](https://astro-paper.pages.dev/posts/predefined-color-schemes#astro-dark) for more info.\n\n![New Predefined Dark Color Scheme](https://user-images.githubusercontent.com/53733092/215680520-59427bb0-f4cb-48c0-bccc-f182a428d72d.svg)\n\n### Automatic Class Sorting\n\nAstroPaper 2.0 includes automatic class sorting with [TailwindCSS Prettier plugin](https://tailwindcss.com/blog/automatic-class-sorting-with-prettier)\n\n### Updated Docs & README\n\nAll the [#docs](https://astro-paper.pages.dev/tags/docs/) blog posts and [README](https://github.com/satnaing/astro-paper#readme) are updated for this AstroPaper v2.\n\n## Bug Fixes\n\n- fix broken tags in the Blog Post page\n- in a tag page, the last part of the breadcrumb is now updated to lower-case for consistency\n- exclude draft posts in a tag page\n- fix 'onChange value not updating issue' after a page reload\n";
						const data = {author:"Sat Naing",pubDatetime:new Date(1675094272737),title:"AstroPaper 2.0",featured:false,draft:true,tags:["release"],ogImage:"https://user-images.githubusercontent.com/53733092/215771435-25408246-2309-4f8b-a781-1f3d93bdf0ec.png",description:"AstroPaper with the enhancements of Astro v2. Type-safe markdown contents, bug fixes and better dev experience etc."};
						const _internal = {
							type: 'content',
							filePath: "C:/Workspaces/Cloned/astro-ublog/src/content/blog/astro-paper-2.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
